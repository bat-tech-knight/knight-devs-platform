from flask import Flask, jsonify, request
from flask_cors import CORS
import os
import logging
from dotenv import load_dotenv
from job_scraper_service import JobScraperService
from resume_parser import ResumeParser

# Load environment variables from .env file
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Validate required environment variables
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
if not OPENAI_API_KEY or OPENAI_API_KEY == 'your_openai_api_key_here':
    logger.warning("⚠️  OPENAI_API_KEY not set or using placeholder. AI resume parsing will use fallback mode.")
else:
    logger.info("✅ OpenAI API key loaded successfully")

app = Flask(__name__)
CORS(app)

# Initialize services
job_scraper = JobScraperService()
resume_parser = ResumeParser()

# Enable CORS for all routes
@app.after_request
def after_request(response):
    response.headers.add('Access-Control-Allow-Origin', '*')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
    response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
    return response

@app.route('/')
def hello():
    return jsonify({
        'message': 'Hello from Flask!',
        'status': 'success'
    })

@app.route('/api/health')
def health():
    return jsonify({
        'status': 'healthy',
        'service': 'Flask API'
    })

@app.route('/api/users', methods=['GET'])
def get_users():
    # Mock user data
    users = [
        {'id': 1, 'name': 'John Doe', 'email': 'john@example.com'},
        {'id': 2, 'name': 'Jane Smith', 'email': 'jane@example.com'},
        {'id': 3, 'name': 'Bob Johnson', 'email': 'bob@example.com'}
    ]
    return jsonify({
        'users': users,
        'count': len(users)
    })

@app.route('/api/users', methods=['POST'])
def create_user():
    data = request.get_json()
    
    if not data or 'name' not in data or 'email' not in data:
        return jsonify({
            'error': 'Name and email are required'
        }), 400
    
    # Mock user creation
    new_user = {
        'id': 4,  # In a real app, this would be generated by the database
        'name': data['name'],
        'email': data['email']
    }
    
    return jsonify({
        'message': 'User created successfully',
        'user': new_user
    }), 201

@app.route('/api/python-example')
def python_example():
    return jsonify({
        'message': 'This is a Python Flask endpoint',
        'python_version': os.sys.version,
        'framework': 'Flask'
    })

# Job Scraping Endpoints

@app.route('/api/jobs/scrape', methods=['POST'])
def scrape_jobs():
    """
    Scrape jobs from various job boards based on configuration
    """
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                'success': False,
                'error': 'Request body is required',
                'error_type': 'missing_request_body'
            }), 400
        
        # Log the incoming request for debugging
        print(f"Received scraping request: {data}")
        
        # Perform job scraping
        result = job_scraper.scrape_jobs(data)
        
        if result['success']:
            return jsonify(result), 200
        else:
            # Return detailed error information with appropriate HTTP status
            error_response = {
                'success': False,
                'error': result.get('error', 'Unknown error'),
                'error_type': result.get('error_type', 'validation_error'),
                'validation_errors': result.get('validation_errors', []),
                'scraping_errors': result.get('scraping_errors', []),
                'warnings': result.get('warnings', []),
                'received_config': data,
                'config_used': result.get('config_used', {}),
                'suggestion': result.get('suggestion', ''),
                'supported_sites': job_scraper.get_supported_sites(),
                'supported_countries': job_scraper.get_supported_countries(),
                'supported_job_types': job_scraper.get_supported_job_types()
            }
            
            # Determine appropriate HTTP status code based on error type
            error_type = result.get('error_type', 'validation_error')
            if error_type in ['site_blocking', 'scraping_error']:
                status_code = 503  # Service Unavailable
            elif error_type == 'validation_error':
                status_code = 400  # Bad Request
            else:
                status_code = 500  # Internal Server Error
                
            return jsonify(error_response), status_code
            
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Internal server error: {str(e)}',
            'error_type': 'server_error',
            'exception_type': type(e).__name__
        }), 500

@app.route('/api/jobs/config/validate', methods=['POST'])
def validate_scraping_config():
    """
    Validate job scraping configuration without performing the actual scraping
    """
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                'success': False,
                'error': 'Request body is required',
                'error_type': 'missing_request_body'
            }), 400
        
        # Log the incoming validation request for debugging
        print(f"Received validation request: {data}")
        
        # Validate configuration
        validation_result = job_scraper.validate_scraping_config(data)
        
        # Enhanced response with detailed information
        response = {
            'success': True,
            'validation_result': validation_result,
            'received_config': data,
            'supported_sites': job_scraper.get_supported_sites(),
            'supported_countries': job_scraper.get_supported_countries(),
            'supported_job_types': job_scraper.get_supported_job_types(),
            'validation_summary': {
                'is_valid': validation_result['is_valid'],
                'error_count': len(validation_result['errors']),
                'warning_count': len(validation_result['warnings']),
                'has_errors': len(validation_result['errors']) > 0,
                'has_warnings': len(validation_result['warnings']) > 0
            }
        }
        
        return jsonify(response), 200
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Internal server error: {str(e)}',
            'error_type': 'server_error',
            'exception_type': type(e).__name__
        }), 500

@app.route('/api/jobs/sites', methods=['GET'])
def get_supported_sites():
    """
    Get list of supported job sites
    """
    try:
        sites = job_scraper.get_supported_sites()
        return jsonify({
            'success': True,
            'sites': sites,
            'count': len(sites)
        }), 200
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Internal server error: {str(e)}'
        }), 500

@app.route('/api/jobs/countries', methods=['GET'])
def get_supported_countries():
    """
    Get list of supported countries
    """
    try:
        countries = job_scraper.get_supported_countries()
        return jsonify({
            'success': True,
            'countries': countries,
            'count': len(countries)
        }), 200
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Internal server error: {str(e)}'
        }), 500

@app.route('/api/jobs/job-types', methods=['GET'])
def get_supported_job_types():
    """
    Get list of supported job types
    """
    try:
        job_types = job_scraper.get_supported_job_types()
        return jsonify({
            'success': True,
            'job_types': job_types,
            'count': len(job_types)
        }), 200
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Internal server error: {str(e)}'
        }), 500

@app.route('/api/jobs/stats', methods=['GET'])
def get_scraping_stats():
    """
    Get statistics about supported scraping options
    """
    try:
        stats = job_scraper.get_scraping_stats()
        return jsonify({
            'success': True,
            'stats': stats
        }), 200
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Internal server error: {str(e)}'
        }), 500

@app.route('/api/jobs/example-config', methods=['GET'])
def get_example_config():
    """
    Get an example configuration for job scraping
    """
    try:
        example_config = {
            'site_name': 'indeed',
            'search_term': 'python developer',
            'location': 'New York, NY',
            'country_indeed': 'usa',
            'job_type': 'fulltime',
            'results_wanted': 10,
            'distance': 25,
            'is_remote': False,
            'easy_apply': None,
            'linkedin_fetch_description': False,
            'enforce_annual_salary': False,
            'offset': 0,
            'hours_old': None
        }
        
        return jsonify({
            'success': True,
            'example_config': example_config,
            'description': 'This is an example configuration for job scraping. Modify the values as needed.'
        }), 200
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Internal server error: {str(e)}'
        }), 500

# Resume Parsing Endpoints

@app.route('/api/parse-resume', methods=['POST'])
def parse_resume():
    """
    Parse resume text using AI to extract structured information
    """
    try:
        print("Received resume parsing request")
        
        data = request.get_json()
        
        if not data or 'resume_text' not in data:
            print("Error: Resume text is required")
            return jsonify({
                'success': False,
                'error': 'Resume text is required',
                'error_type': 'missing_resume_text'
            }), 400
        
        resume_text = data['resume_text']
        
        if not resume_text.strip():
            print("Error: Resume text is empty")
            return jsonify({
                'success': False,
                'error': 'Resume text cannot be empty',
                'error_type': 'empty_resume_text'
            }), 400
        
        print(f"Parsing resume text (length: {len(resume_text)} characters)")
        
        # Parse resume with AI
        parsed_data = resume_parser.parse_resume_with_ai(resume_text)
        
        print("Resume parsing completed successfully")
        
        return jsonify({
            'success': True,
            'parsed_data': parsed_data
        }), 200
        
    except Exception as e:
        print(f"Error parsing resume: {str(e)}")
        print(f"Exception type: {type(e).__name__}")
        
        # Return more detailed error information
        error_response = {
            'success': False,
            'error': f'Failed to parse resume: {str(e)}',
            'error_type': 'parsing_error',
            'exception_type': type(e).__name__
        }
        
        # Add specific error handling for common issues
        if 'timeout' in str(e).lower():
            error_response['error_type'] = 'timeout_error'
            error_response['suggestion'] = 'The AI service took too long to respond. Please try again.'
        elif 'api' in str(e).lower():
            error_response['error_type'] = 'api_error'
            error_response['suggestion'] = 'There was an issue with the AI service. Please check your API configuration.'
        elif 'json' in str(e).lower():
            error_response['error_type'] = 'json_parsing_error'
            error_response['suggestion'] = 'The AI response could not be parsed. Please try again.'
        
        return jsonify(error_response), 500

@app.route('/api/parse-resume/test', methods=['POST'])
def test_resume_parsing():
    """
    Test endpoint for debugging resume parsing issues
    """
    try:
        data = request.get_json()
        test_text = data.get('resume_text', 'John Doe\nSoftware Engineer\njohn@example.com\n123-456-7890')
        
        logger.info(f"Testing resume parsing with text: {test_text[:100]}...")
        
        # Parse resume with AI
        parsed_data = resume_parser.parse_resume_with_ai(test_text)
        
        return jsonify({
            'success': True,
            'parsed_data': parsed_data,
            'test_text': test_text
        }), 200
        
    except Exception as e:
        logger.error(f"Test parsing failed: {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e),
            'error_type': type(e).__name__,
            'test_text': data.get('resume_text', '') if 'data' in locals() else None
        }), 500

@app.route('/api/parse-resume/health', methods=['GET'])
def resume_parser_health():
    """
    Check if the resume parser is working correctly
    """
    try:
        # Check if OpenAI API key is configured
        api_key = os.getenv('OPENAI_API_KEY')
        base_url = os.getenv('OPENAI_BASE_URL', 'https://api.openai.com/v1')
        
        if not api_key or api_key == 'your_openai_api_key_here':
            return jsonify({
                'success': False,
                'error': 'OpenAI API key not configured',
                'error_type': 'missing_api_key',
                'suggestion': 'Set OPENAI_API_KEY environment variable',
                'api_key_status': 'missing' if not api_key else 'placeholder',
                'api_key_value': api_key[:10] + '...' if api_key else None,
                'base_url': base_url
            }), 503
        
        # Test with a simple resume text
        test_resume = "John Doe\nSoftware Engineer\njohn@example.com\n123-456-7890"
        
        logger.info("Testing resume parser with sample data")
        parsed_data = resume_parser.parse_resume_with_ai(test_resume)
        
        return jsonify({
            'success': True,
            'message': 'Resume parser is working correctly',
            'test_result': {
                'first_name': parsed_data.get('first_name', 'N/A'),
                'last_name': parsed_data.get('last_name', 'N/A'),
                'headline': parsed_data.get('headline', 'N/A')
            },
            'api_key_configured': True,
            'api_key_length': len(api_key),
            'api_key_prefix': api_key[:10] + '...',
            'base_url': base_url
        }), 200
        
    except Exception as e:
        logger.error(f"Resume parser health check failed: {str(e)}")
        return jsonify({
            'success': False,
            'error': f'Resume parser health check failed: {str(e)}',
            'error_type': 'health_check_failed',
            'exception_type': type(e).__name__,
            'api_key_status': 'configured' if os.getenv('OPENAI_API_KEY') else 'missing',
            'api_key_length': len(os.getenv('OPENAI_API_KEY', '')),
            'base_url': os.getenv('OPENAI_BASE_URL', 'https://api.openai.com/v1')
        }), 503

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5328)
